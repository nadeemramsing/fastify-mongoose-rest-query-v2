{
  "version": 3,
  "sources": ["../../src/handler/sub.handler.ts"],
  "sourcesContent": ["import { RouteHandlerMethod } from 'fastify'\nimport { httpErrors } from '@fastify/sensible'\nimport { HandlerAccessEnum } from '../mrq.enum'\nimport * as subService from '../services/sub.service'\nimport { getQueryForSubarray } from '../utils/query.sub.utils'\nimport { ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL } from '../mrq.errors'\nimport { ISchemaOption } from '../mrq.interfaces'\n\nexport const getSubHandler = (\n  modelName: string,\n  {\n    subPathName,\n    handlerAccesses,\n    getSubarray,\n    subIdName,\n  }: Omit<ISchemaOption, 'endpointName'>\n) => {\n  const getByQuery: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.GET_BY_ID_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { subarray } = await getSubarray(req, modelName, subPathName, true)\n\n    const query = getQueryForSubarray(req.query)\n\n    return subService.getByQuery({ query, subarray })\n  }\n\n  // ---\n\n  const count: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.COUNT_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { subarray } = await getSubarray(req, modelName, subPathName, true)\n\n    const query = getQueryForSubarray(req.query, { ignoreSelect: true })\n\n    return subService.count({ query, subarray })\n  }\n\n  // ---\n\n  const distinct: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.DISTINCT_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { subarray } = await getSubarray(req, modelName, subPathName, true)\n\n    const query = getQueryForSubarray(req.query, { ignoreSelect: true })\n\n    const { path } = req.params as { path: string }\n\n    return subService.distinct({ query, path, subarray })\n  }\n\n  // ---\n\n  const create: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.CREATE_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { Model, doc, subarray } = await getSubarray(\n      req,\n      modelName,\n      subPathName\n    )\n\n    return subService.create({\n      body: req.body,\n      doc,\n      Model,\n      req,\n      subarray,\n    })\n  }\n\n  // ---\n\n  const updateMany: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.UPDATE_MANY_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { Model, doc, subarray } = await getSubarray(\n      req,\n      modelName,\n      subPathName\n    )\n\n    return subService.updateMany({\n      body: req.body,\n      doc,\n      Model,\n      req,\n      subarray,\n    })\n  }\n\n  // ---\n\n  const deleteByQuery: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.DELETE_BY_QUERY_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { Model, doc, subarray } = await getSubarray(\n      req,\n      modelName,\n      subPathName\n    )\n\n    const query = getQueryForSubarray(req.query, { ignoreSelect: true })\n\n    return subService.deleteByQuery({ doc, Model, req, subarray, query })\n  }\n\n  // ---\n\n  const getById: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.GET_BY_ID_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { subarray } = await getSubarray(req, modelName, subPathName)\n\n    const params = req.params as { [key: string]: string }\n\n    const query = getQueryForSubarray(req.query)\n\n    return subService.getById({ query, subarray, subId: params[subIdName] })\n  }\n\n  // ---\n\n  const updateById: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.UPDATE_BY_ID_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { Model, doc, subarray } = await getSubarray(\n      req,\n      modelName,\n      subPathName\n    )\n\n    const params = req.params as { [key: string]: string }\n\n    return subService.updateById({\n      body: req.body,\n      subId: params[subIdName],\n      doc,\n      Model,\n      req,\n      subarray,\n    })\n  }\n\n  // ---\n\n  const deleteById: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.DELETE_BY_ID_SUB))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const { Model, doc, subarray } = await getSubarray(\n      req,\n      modelName,\n      subPathName\n    )\n\n    const params = req.params as { [key: string]: string }\n\n    return subService.deleteById({\n      doc,\n      Model,\n      req,\n      subarray,\n      subId: params[subIdName],\n    })\n  }\n\n  return {\n    getByQuery,\n    count,\n    distinct,\n    create,\n    updateMany,\n    deleteByQuery,\n\n    getById,\n    updateById,\n    deleteById,\n  }\n}\n"],
  "mappings": ";AACA,SAAS,kBAAkB;AAC3B,SAAS,yBAAyB;AAClC,YAAY,gBAAgB;AAC5B,SAAS,2BAA2B;AACpC,SAAS,+CAA+C;AAGjD,IAAM,gBAAgB,CAC3B,WACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MACG;AACH,QAAMA,cAAiC,OAAO,KAAK,QAAQ;AACzD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,aAAa;AAC3D,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,SAAS,IAAI,MAAM,YAAY,KAAK,WAAW,aAAa,IAAI;AAExE,UAAM,QAAQ,oBAAoB,IAAI,KAAK;AAE3C,WAAkB,sBAAW,EAAE,OAAO,SAAS,CAAC;AAAA,EAClD;AAIA,QAAMC,SAA4B,OAAO,KAAK,QAAQ;AACpD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,SAAS;AACvD,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,SAAS,IAAI,MAAM,YAAY,KAAK,WAAW,aAAa,IAAI;AAExE,UAAM,QAAQ,oBAAoB,IAAI,OAAO,EAAE,cAAc,KAAK,CAAC;AAEnE,WAAkB,iBAAM,EAAE,OAAO,SAAS,CAAC;AAAA,EAC7C;AAIA,QAAMC,YAA+B,OAAO,KAAK,QAAQ;AACvD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,YAAY;AAC1D,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,SAAS,IAAI,MAAM,YAAY,KAAK,WAAW,aAAa,IAAI;AAExE,UAAM,QAAQ,oBAAoB,IAAI,OAAO,EAAE,cAAc,KAAK,CAAC;AAEnE,UAAM,EAAE,KAAK,IAAI,IAAI;AAErB,WAAkB,oBAAS,EAAE,OAAO,MAAM,SAAS,CAAC;AAAA,EACtD;AAIA,QAAMC,UAA6B,OAAO,KAAK,QAAQ;AACrD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,UAAU;AACxD,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,OAAO,KAAK,SAAS,IAAI,MAAM;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,WAAkB,kBAAO;AAAA,MACvB,MAAM,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAIA,QAAMC,cAAiC,OAAO,KAAK,QAAQ;AACzD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,eAAe;AAC7D,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,OAAO,KAAK,SAAS,IAAI,MAAM;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,WAAkB,sBAAW;AAAA,MAC3B,MAAM,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAIA,QAAMC,iBAAoC,OAAO,KAAK,QAAQ;AAC5D,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,mBAAmB;AACjE,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,OAAO,KAAK,SAAS,IAAI,MAAM;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,QAAQ,oBAAoB,IAAI,OAAO,EAAE,cAAc,KAAK,CAAC;AAEnE,WAAkB,yBAAc,EAAE,KAAK,OAAO,KAAK,UAAU,MAAM,CAAC;AAAA,EACtE;AAIA,QAAMC,WAA8B,OAAO,KAAK,QAAQ;AACtD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,aAAa;AAC3D,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,SAAS,IAAI,MAAM,YAAY,KAAK,WAAW,WAAW;AAElE,UAAM,SAAS,IAAI;AAEnB,UAAM,QAAQ,oBAAoB,IAAI,KAAK;AAE3C,WAAkB,mBAAQ,EAAE,OAAO,UAAU,OAAO,OAAO,SAAS,EAAE,CAAC;AAAA,EACzE;AAIA,QAAMC,cAAiC,OAAO,KAAK,QAAQ;AACzD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,gBAAgB;AAC9D,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,OAAO,KAAK,SAAS,IAAI,MAAM;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,SAAS,IAAI;AAEnB,WAAkB,sBAAW;AAAA,MAC3B,MAAM,IAAI;AAAA,MACV,OAAO,OAAO,SAAS;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAIA,QAAMC,cAAiC,OAAO,KAAK,QAAQ;AACzD,QAAI,CAAC,gBAAgB,SAAS,kBAAkB,gBAAgB;AAC9D,YAAM,WAAW,aAAa,uCAAuC;AAEvE,UAAM,EAAE,OAAO,KAAK,SAAS,IAAI,MAAM;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,UAAM,SAAS,IAAI;AAEnB,WAAkB,sBAAW;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO,OAAO,SAAS;AAAA,IACzB,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL,YAAAR;AAAA,IACA,OAAAC;AAAA,IACA,UAAAC;AAAA,IACA,QAAAC;AAAA,IACA,YAAAC;AAAA,IACA,eAAAC;AAAA,IAEA,SAAAC;AAAA,IACA,YAAAC;AAAA,IACA,YAAAC;AAAA,EACF;AACF;",
  "names": ["getByQuery", "count", "distinct", "create", "updateMany", "deleteByQuery", "getById", "updateById", "deleteById"]
}
