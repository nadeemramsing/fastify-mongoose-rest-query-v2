{
  "version": 3,
  "sources": ["../../src/handler/main.handler.ts"],
  "sourcesContent": ["import { RouteHandlerMethod } from 'fastify'\nimport { httpErrors } from '@fastify/sensible'\nimport { ClientSession, Document } from 'mongoose'\nimport { model } from '../utils/db.utils'\nimport { leanOptions, toJSONOptions } from '../mrq.config'\nimport { getQuery } from '../utils/query.utils'\nimport { HandlerAccessEnum } from '../mrq.enum'\nimport {\n  getArrayFromBodyWithId,\n  runStaticMethods,\n  useSession,\n} from '../utils/mongoose.utils'\nimport {\n  DOCUMENT_NOT_FOUND,\n  IMPLICIT_DELETE_ALL_NOT_ALLOWED,\n  INVALID_BODY,\n  NO_DOCUMENT_FOUND,\n  PATH_NOT_FOUND_IN_SCHEMA,\n  ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL,\n} from '../mrq.errors'\n\nexport const getMainHandler = (\n  modelName: string,\n  handlerAccesses: HandlerAccessEnum[] = []\n) => {\n  const getByQuery: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.GET_BY_QUERY))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    const query = getQuery(req, modelName)\n\n    const docs = await Model.find(query.filter, query.select, { req })\n      .populate(query.populate)\n      .sort(query.sort)\n      .collation({ locale: 'simple', caseLevel: true })\n      .limit(query.limit)\n      .skip(query.skip)\n      .lean(leanOptions)\n\n    runStaticMethods({ Model, docs, query, req })\n\n    return docs\n  }\n\n  // ---\n\n  const count: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.COUNT))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    const query = getQuery(req, modelName, { ignoreSelect: true })\n\n    return { n: await Model.countDocuments(query.filter) }\n  }\n\n  // ---\n\n  const distinct: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.DISTINCT))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const params = req.params as { path: string }\n\n    const Model = model(req, modelName)\n\n    const doesPathExists = Model.schema.path(params.path)\n\n    if (!doesPathExists) throw httpErrors.notFound(PATH_NOT_FOUND_IN_SCHEMA)\n\n    const query = getQuery(req, modelName, { ignoreSelect: true })\n\n    return Model.distinct(params.path, query.filter)\n  }\n\n  // ---\n\n  const create: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.CREATE))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    let body: any = req.body\n\n    const isBodyAnArray = Array.isArray(body)\n\n    if (isBodyAnArray && !body.length)\n      throw httpErrors.notFound(`${INVALID_BODY}: no object found in array`)\n\n    if (!isBodyAnArray) body = [body]\n\n    const docs = await useSession(Model, req, (session?: ClientSession) =>\n      Model.create(body, { req, session, ordered: !!session })\n    )\n\n    const result = docs.map((doc: any) => doc.toJSON(toJSONOptions))\n\n    return isBodyAnArray ? result : result[0]\n  }\n\n  // ---\n\n  const updateMany: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.UPDATE_MANY))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    const body = getArrayFromBodyWithId(req.body as any[])\n\n    const _id = { $in: body.map((item: any) => item._id) }\n\n    const docs: Record<string, Document> = await Model.find({ _id }).then(\n      (docs) => docs.reduce((acc, v: any) => ({ ...acc, [v._id]: v }), {})\n    )\n\n    //@ts-ignore\n    req.query.useSession = 'true'\n\n    const docsSaved: Document[] = []\n\n    const isOverwrite = req.routeOptions.url?.endsWith?.('/overwrite')\n\n    await useSession(Model, req, async (session?: ClientSession) => {\n      for (const item of body) {\n        const doc = docs[item._id]\n\n        const _prev = doc.toJSON(toJSONOptions)\n\n        isOverwrite ? doc.overwrite(item) : doc.set(item)\n\n        // @ts-ignore: custom arg req\n        docsSaved.push(await doc.save({ req, session, _prev }))\n      }\n    })\n\n    return docsSaved\n  }\n\n  // ---\n\n  const deleteByQuery: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.DELETE_BY_QUERY))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    const query = getQuery(req, modelName, { ignoreSelect: true })\n\n    const isDeleteAll = !Object.keys(query.filter).length\n\n    if (isDeleteAll)\n      throw httpErrors.methodNotAllowed(\n        `${IMPLICIT_DELETE_ALL_NOT_ALLOWED}: delete directly in database`\n      )\n\n    const { deletedCount } = await useSession(\n      Model,\n      req,\n      (session?: ClientSession) => Model.deleteMany(query.filter, { session })\n    )\n\n    if (!deletedCount) throw httpErrors.notFound(NO_DOCUMENT_FOUND)\n\n    return { deletedCount }\n  }\n\n  // ---\n\n  const getById: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.GET_BY_ID))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    const { id } = req.params as { id: string }\n\n    const query = getQuery(req, modelName)\n\n    const doc = await Model.findById(id, query.select, { req })\n      .and(query.filter)\n      .populate(query.populate)\n      .lean(leanOptions)\n\n    if (!doc) throw httpErrors.notFound(DOCUMENT_NOT_FOUND)\n\n    runStaticMethods({ Model, docs: [doc], query, req })\n\n    return doc\n  }\n\n  // ---\n\n  const updateById: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.UPDATE_BY_ID))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    const { id } = req.params as { id: string }\n\n    const doc = await Model.findById(id)\n\n    if (!doc) throw httpErrors.notFound(DOCUMENT_NOT_FOUND)\n\n    const _prev = doc.toJSON(toJSONOptions)\n\n    req.routeOptions.url?.endsWith?.('/overwrite')\n      ? doc.overwrite(req.body)\n      : doc.set(req.body)\n\n    await useSession(\n      Model,\n      req,\n      // @ts-ignore: custom arg req\n      (session: ClientSession) => doc.save({ req, session, _prev })\n    )\n\n    return doc.toJSON(toJSONOptions)\n  }\n\n  // ---\n\n  const deleteById: RouteHandlerMethod = async (req, rep) => {\n    if (!handlerAccesses.includes(HandlerAccessEnum.DELETE_BY_ID))\n      throw httpErrors.unauthorized(ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL)\n\n    const Model = model(req, modelName)\n\n    const { id: _id } = req.params as { id: string }\n\n    const { deletedCount } = await useSession(\n      Model,\n      req,\n      (session?: ClientSession) => Model.deleteOne({ _id }, { session })\n    )\n\n    if (!deletedCount) throw httpErrors.notFound(DOCUMENT_NOT_FOUND)\n\n    return { deletedCount }\n  }\n\n  return {\n    getByQuery,\n    count,\n    distinct,\n    create,\n    updateMany,\n    deleteByQuery,\n\n    getById,\n    updateById,\n    deleteById,\n  }\n}\n"],
  "mappings": "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",
  "names": ["docs"]
}
