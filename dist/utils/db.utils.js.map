{
  "version": 3,
  "sources": ["../../src/utils/db.utils.ts", "../../src/mrq.errors.ts", "../../src/mrq.config.ts"],
  "sourcesContent": ["import { FastifyInstance, FastifyRequest } from 'fastify'\nimport { httpErrors } from '@fastify/sensible'\nimport { Connection, createConnection, IndexesDiff } from 'mongoose'\nimport fp from 'lodash/fp'\nimport promiseAll from 'promise-all'\nimport { IRestOptions } from '../mrq.interfaces'\nimport { SCHEMA_NOT_REGISTERED } from '../mrq.errors'\nimport { store } from '../mrq.config'\n\nconst mongoUrl = `${store.mongoBaseUrl}/${store.mongoDatabaseName ?? ''}`\n\nconst conn: Connection = createConnection(mongoUrl, {\n  autoIndex: false,\n  auth: {\n    username: store.mongoUser,\n    password: store.mongoPassword,\n  },\n  authSource: store.mongoAdminSource,\n  minPoolSize: store.mongoMinPoolSize,\n  maxPoolSize: store.mongoMaxPoolSize,\n})\n\nexport async function getDB(\n  app: FastifyInstance,\n  databaseName: string,\n  schemas: IRestOptions['schemas']\n) {\n  let connDB: Connection\n\n  if (store.mongoDatabaseName) connDB = conn\n  else connDB = conn.useDb(databaseName, { useCache: true })\n\n  if (!connDB.get('hasMapModelsBeenCalled'))\n    await mapModels(app, connDB, schemas)\n\n  return connDB\n}\n\nasync function mapModels(\n  app: FastifyInstance,\n  connDB: Connection,\n  schemas: IRestOptions['schemas']\n) {\n  connDB.set('hasMapModelsBeenCalled', true)\n\n  const p: { [modelName: string]: Promise<IndexesDiff> } = {}\n\n  connDB.securePathsPerModel = {}\n\n  for (const modelName in schemas) {\n    const { schema } = schemas[modelName]\n\n    if (modelName in connDB.models) continue\n\n    const Model = connDB.model(modelName, schema)\n\n    p[modelName] = Model.diffIndexes()\n\n    schema.eachPath((path, schemaType) => {\n      if (!connDB.securePathsPerModel[modelName])\n        connDB.securePathsPerModel[modelName] = {}\n\n      if (schemaType.options.secure)\n        connDB.securePathsPerModel[modelName][path] = true\n    })\n  }\n\n  const diffs = await promiseAll(p).then(\n    fp.pickBy<IndexesDiff>((v, k) => v.toDrop.length || v.toCreate.length)\n  )\n\n  const hasAnyDiff = Object.keys(diffs).length\n\n  if (hasAnyDiff)\n    app.log.info('Result of diffIndexes:', JSON.stringify(diffs, null, 2))\n}\n\nexport async function closeConnections() {\n  await conn.close()\n}\n\nexport function model(req: FastifyRequest, modelName: string) {\n  const Model = req.mongooseConn.models[modelName]\n\n  if (!Model) throw httpErrors.badRequest(SCHEMA_NOT_REGISTERED)\n\n  return Model\n}\n", "export const SCHEMA_NOT_REGISTERED = 'SCHEMA_NOT_REGISTERED'\n\nexport const SESSION_NOT_FOUND = 'SESSION_NOT_FOUND'\n\nexport const IMPLICIT_SELECT_ALL_NOT_ALLOWED = 'IMPLICIT_SELECT_ALL_NOT_ALLOWED'\n\nexport const ROLE_DOES_NOT_HAVE_ACCESS_HOOK_LEVEL =\n  'ROLE_DOES_NOT_HAVE_ACCESS_HOOK_LEVEL'\n\nexport const ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL =\n  'ROLE_DOES_NOT_HAVE_ACCESS_HANDLER_LEVEL'\n\nexport const PATH_NOT_FOUND_IN_SCHEMA = 'PATH_NOT_FOUND_IN_SCHEMA'\n\nexport const IMPLICIT_DELETE_ALL_NOT_ALLOWED = 'IMPLICIT_DELETE_ALL_NOT_ALLOWED'\n\nexport const NO_DOCUMENT_FOUND = 'NO_DOCUMENT_FOUND'\n\nexport const INVALID_BODY = 'INVALID_BODY'\n\nexport const EMPTY_BODY = 'EMPTY_BODY'\n\nexport const DOCUMENT_NOT_FOUND = 'DOCUMENT_NOT_FOUND'\n\nexport const SUBARRAY_NOT_FOUND = 'SUBARRAY_NOT_FOUND'\n\nexport const NO_SUBITEM_FOUND = 'NO_SUBITEM_FOUND'\n\nexport const SUBITEM_NOT_FOUND = 'SUBITEM_NOT_FOUND'\n", "export const leanOptions = {\n  virtuals: true,\n  versionKey: false,\n}\n\nexport const toJSONOptions = {\n  virtuals: true,\n  versionKey: false,\n}\n\nexport const memoOptions = {\n  maxAge: 30 * 24 * 60 * 60 * 1_000, // 1 month\n}\n\nexport const store = {\n  mongoDatabaseName: '',\n  mongoUser: '',\n  mongoPassword: '',\n  mongoBaseUrl: 'mongodb://localhost:27016',\n  mongoAdminSource: 'admin',\n  mongoMinPoolSize: 2,\n  mongoMaxPoolSize: 20,\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAA2B;AAC3B,sBAA0D;AAC1D,gBAAe;AACf,yBAAuB;;;ACJhB,IAAM,wBAAwB;;;ACU9B,IAAM,cAAc;AAAA,EACzB,QAAQ,KAAK,KAAK,KAAK,KAAK;AAAA;AAC9B;AAEO,IAAM,QAAQ;AAAA,EACnB,mBAAmB;AAAA,EACnB,WAAW;AAAA,EACX,eAAe;AAAA,EACf,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,kBAAkB;AACpB;;;AFbA,IAAM,WAAW,GAAG,MAAM,YAAY,IAAI,MAAM,qBAAqB,EAAE;AAEvE,IAAM,WAAmB,kCAAiB,UAAU;AAAA,EAClD,WAAW;AAAA,EACX,MAAM;AAAA,IACJ,UAAU,MAAM;AAAA,IAChB,UAAU,MAAM;AAAA,EAClB;AAAA,EACA,YAAY,MAAM;AAAA,EAClB,aAAa,MAAM;AAAA,EACnB,aAAa,MAAM;AACrB,CAAC;AAED,eAAsB,MACpB,KACA,cACA,SACA;AACA,MAAI;AAEJ,MAAI,MAAM,kBAAmB,UAAS;AAAA,MACjC,UAAS,KAAK,MAAM,cAAc,EAAE,UAAU,KAAK,CAAC;AAEzD,MAAI,CAAC,OAAO,IAAI,wBAAwB;AACtC,UAAM,UAAU,KAAK,QAAQ,OAAO;AAEtC,SAAO;AACT;AAEA,eAAe,UACb,KACA,QACA,SACA;AACA,SAAO,IAAI,0BAA0B,IAAI;AAEzC,QAAM,IAAmD,CAAC;AAE1D,SAAO,sBAAsB,CAAC;AAE9B,aAAW,aAAa,SAAS;AAC/B,UAAM,EAAE,OAAO,IAAI,QAAQ,SAAS;AAEpC,QAAI,aAAa,OAAO,OAAQ;AAEhC,UAAM,QAAQ,OAAO,MAAM,WAAW,MAAM;AAE5C,MAAE,SAAS,IAAI,MAAM,YAAY;AAEjC,WAAO,SAAS,CAAC,MAAM,eAAe;AACpC,UAAI,CAAC,OAAO,oBAAoB,SAAS;AACvC,eAAO,oBAAoB,SAAS,IAAI,CAAC;AAE3C,UAAI,WAAW,QAAQ;AACrB,eAAO,oBAAoB,SAAS,EAAE,IAAI,IAAI;AAAA,IAClD,CAAC;AAAA,EACH;AAEA,QAAM,QAAQ,UAAM,mBAAAA,SAAW,CAAC,EAAE;AAAA,IAChC,UAAAC,QAAG,OAAoB,CAAC,GAAG,MAAM,EAAE,OAAO,UAAU,EAAE,SAAS,MAAM;AAAA,EACvE;AAEA,QAAM,aAAa,OAAO,KAAK,KAAK,EAAE;AAEtC,MAAI;AACF,QAAI,IAAI,KAAK,0BAA0B,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AACzE;AAEA,eAAsB,mBAAmB;AACvC,QAAM,KAAK,MAAM;AACnB;AAEO,SAAS,MAAM,KAAqB,WAAmB;AAC5D,QAAM,QAAQ,IAAI,aAAa,OAAO,SAAS;AAE/C,MAAI,CAAC,MAAO,OAAM,2BAAW,WAAW,qBAAqB;AAE7D,SAAO;AACT;",
  "names": ["promiseAll", "fp"]
}
