{
  "version": 3,
  "sources": ["../../src/hooks/get-models.hook.ts", "../../src/utils/db.utils.ts", "../../src/mrq.config.ts"],
  "sourcesContent": ["import { FastifyInstance, onRequestAsyncHookHandler } from 'fastify'\nimport { IModelToSchemaMap } from '../mrq.interfaces'\nimport { getDB } from '../utils/db.utils'\n\nexport const getModelsHook: (\n  app: FastifyInstance,\n  modelToSchemaMap: IModelToSchemaMap\n) => onRequestAsyncHookHandler = (app, modelToSchemaMap) => {\n  if (!app.hasRequestDecorator('mrq-db-name')) {\n    app.decorateRequest('mrq-db-name', '')\n  }\n\n  return async (req) => {\n    req.mongooseConn = await getDB(\n      app,\n      req['mrq-db-name'] as string,\n      modelToSchemaMap\n    )\n  }\n}\n", "import { FastifyInstance, FastifyRequest } from 'fastify'\nimport { httpErrors } from '@fastify/sensible'\nimport { Connection, createConnection, IndexesDiff } from 'mongoose'\nimport fp from 'lodash/fp'\nimport promiseAll from 'promise-all'\nimport { IModelToSchemaMap } from '../mrq.interfaces'\nimport { SCHEMA_NOT_REGISTERED } from '../mrq.errors'\nimport { store } from '../mrq.config'\n\nlet connGlobal: Connection\n\nexport async function initConnection() {\n  const mongoUrl = `${store.mongoBaseUrl}/${store.mongoDatabaseName ?? ''}`\n\n  connGlobal = await createConnection(mongoUrl, {\n    autoIndex: false,\n    auth: {\n      username: store.mongoUser,\n      password: store.mongoPassword,\n    },\n    authSource: store.mongoAdminSource,\n    minPoolSize: store.mongoMinPoolSize,\n    maxPoolSize: store.mongoMaxPoolSize,\n    replicaSet: store.mongoReplicaSet || undefined,\n  }).asPromise()\n}\n\nexport async function getDB(\n  app: FastifyInstance,\n  databaseName: string,\n  schemas: IModelToSchemaMap\n) {\n  let connDB: Connection\n\n  if (store.mongoDatabaseName) connDB = connGlobal\n  else\n    connDB = await connGlobal\n      .useDb(databaseName, { useCache: true })\n      .asPromise()\n\n  if (!connDB.get('hasMapModelsBeenCalled'))\n    await mapModels(app, connDB, schemas)\n\n  return connDB\n}\n\nasync function mapModels(\n  app: FastifyInstance,\n  connDB: Connection,\n  schemas: IModelToSchemaMap\n) {\n  connDB.set('hasMapModelsBeenCalled', true)\n\n  const p: { [modelName: string]: Promise<IndexesDiff> } = {}\n\n  connDB.securePathsPerModel = {}\n\n  for (const modelName in schemas) {\n    const schema = schemas[modelName]\n\n    if (modelName in connDB.models) continue\n\n    const Model = connDB.model(modelName, schema)\n\n    p[modelName] = Model.diffIndexes()\n\n    schema.eachPath((path, schemaType) => {\n      if (!connDB.securePathsPerModel[modelName])\n        connDB.securePathsPerModel[modelName] = {}\n\n      if (schemaType.options.secure)\n        connDB.securePathsPerModel[modelName][path] = true\n    })\n  }\n\n  const diffs = await promiseAll(p).then(\n    fp.pickBy<IndexesDiff>((v, k) => v.toDrop.length || v.toCreate.length)\n  )\n\n  const hasAnyDiff = Object.keys(diffs).length\n\n  if (hasAnyDiff)\n    app.log.info('Result of diffIndexes:', JSON.stringify(diffs, null, 2))\n}\n\nexport async function closeConnections() {\n  await connGlobal.close()\n}\n\nexport function model(req: FastifyRequest, modelName: string) {\n  const Model = req.mongooseConn.models[modelName]\n\n  if (!Model) throw httpErrors.badRequest(SCHEMA_NOT_REGISTERED)\n\n  return Model\n}\n", "export const leanOptions = {\n  virtuals: true,\n  versionKey: false,\n}\n\nexport const toJSONOptions = {\n  virtuals: true,\n  versionKey: false,\n}\n\nexport const memoOptions = {\n  maxAge: 24 * 24 * 60 * 60 * 1_000, // 24 days\n}\n\nexport const store = {\n  alwaysUseSession: false,\n  mongoDatabaseName: '',\n  mongoUser: '',\n  mongoPassword: '',\n  mongoBaseUrl: 'mongodb://localhost:27016',\n  mongoAdminSource: 'admin',\n  mongoMinPoolSize: 2,\n  mongoMaxPoolSize: 20,\n  mongoReplicaSet: ''\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,sBAA2B;AAC3B,sBAA0D;AAC1D,gBAAe;AACf,yBAAuB;;;ACMhB,IAAM,cAAc;AAAA,EACzB,QAAQ,KAAK,KAAK,KAAK,KAAK;AAAA;AAC9B;AAEO,IAAM,QAAQ;AAAA,EACnB,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,WAAW;AAAA,EACX,eAAe;AAAA,EACf,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,iBAAiB;AACnB;;;ADfA,IAAI;AAkBJ,eAAsB,MACpB,KACA,cACA,SACA;AACA,MAAI;AAEJ,MAAI,MAAM,kBAAmB,UAAS;AAAA;AAEpC,aAAS,MAAM,WACZ,MAAM,cAAc,EAAE,UAAU,KAAK,CAAC,EACtC,UAAU;AAEf,MAAI,CAAC,OAAO,IAAI,wBAAwB;AACtC,UAAM,UAAU,KAAK,QAAQ,OAAO;AAEtC,SAAO;AACT;AAEA,eAAe,UACb,KACA,QACA,SACA;AACA,SAAO,IAAI,0BAA0B,IAAI;AAEzC,QAAM,IAAmD,CAAC;AAE1D,SAAO,sBAAsB,CAAC;AAE9B,aAAW,aAAa,SAAS;AAC/B,UAAM,SAAS,QAAQ,SAAS;AAEhC,QAAI,aAAa,OAAO,OAAQ;AAEhC,UAAM,QAAQ,OAAO,MAAM,WAAW,MAAM;AAE5C,MAAE,SAAS,IAAI,MAAM,YAAY;AAEjC,WAAO,SAAS,CAAC,MAAM,eAAe;AACpC,UAAI,CAAC,OAAO,oBAAoB,SAAS;AACvC,eAAO,oBAAoB,SAAS,IAAI,CAAC;AAE3C,UAAI,WAAW,QAAQ;AACrB,eAAO,oBAAoB,SAAS,EAAE,IAAI,IAAI;AAAA,IAClD,CAAC;AAAA,EACH;AAEA,QAAM,QAAQ,UAAM,mBAAAA,SAAW,CAAC,EAAE;AAAA,IAChC,UAAAC,QAAG,OAAoB,CAAC,GAAG,MAAM,EAAE,OAAO,UAAU,EAAE,SAAS,MAAM;AAAA,EACvE;AAEA,QAAM,aAAa,OAAO,KAAK,KAAK,EAAE;AAEtC,MAAI;AACF,QAAI,IAAI,KAAK,0BAA0B,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AACzE;;;AD/EO,IAAM,gBAGoB,CAAC,KAAK,qBAAqB;AAC1D,MAAI,CAAC,IAAI,oBAAoB,aAAa,GAAG;AAC3C,QAAI,gBAAgB,eAAe,EAAE;AAAA,EACvC;AAEA,SAAO,OAAO,QAAQ;AACpB,QAAI,eAAe,MAAM;AAAA,MACvB;AAAA,MACA,IAAI,aAAa;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["promiseAll", "fp"]
}
