{
  "version": 3,
  "sources": ["../../src/hooks/assign-models.hook.ts", "../../src/utils/db.utils.ts"],
  "sourcesContent": ["import { FastifyInstance, onRequestAsyncHookHandler } from 'fastify'\nimport { IRestOptions } from '../mrq.interfaces'\nimport { getDB } from '../utils/db.utils'\n\nexport const assignModelsHook: (\n  app: FastifyInstance,\n  opts: IRestOptions\n) => onRequestAsyncHookHandler = (app, opts) => {\n  if (!app.hasRequestDecorator('models')) {\n    app.decorateRequest('models', null)\n  }\n\n  if (!app.hasRequestDecorator('x-client-mongodb-path')) {\n    app.decorateRequest('x-client-mongodb-path', '')\n  }\n\n  return async (req, rep) => {\n    req.mongoose_conn = await getDB(\n      app,\n      req['x-client-mongodb-path'] as string,\n      opts.schemas\n    )\n  }\n}\n", "import { FastifyInstance, FastifyRequest } from 'fastify'\nimport { httpErrors } from '@fastify/sensible'\nimport { Connection, createConnection, IndexesDiff } from 'mongoose'\nimport fp from 'lodash/fp'\nimport promiseAll from 'promise-all'\nimport { IRestOptions } from '../mrq.interfaces'\nimport { SCHEMA_NOT_REGISTERED } from '../mrq.errors'\n\nconst pool: { [key: string]: Connection } = {}\n\nexport async function getDB(\n  app: FastifyInstance,\n  uri: string,\n  schemas: IRestOptions['schemas']\n) {\n  let conn: Connection = pool[uri]\n\n  if (!conn) {\n    conn = createConnection(uri, { autoIndex: false })\n\n    await conn.asPromise()\n\n    pool[uri] = conn\n\n    await mapModels(app, conn, schemas)\n  }\n\n  return conn\n}\n\nasync function mapModels(\n  app: FastifyInstance,\n  conn: Connection,\n  schemas: IRestOptions['schemas']\n) {\n  const p: { [modelName: string]: Promise<IndexesDiff> } = {}\n\n  conn.securePathsPerModel = {}\n\n  for (const modelName in schemas) {\n    const { schema } = schemas[modelName]\n\n    if (modelName in conn.models) continue\n\n    const Model = conn.model(modelName, schema)\n\n    p[modelName] = Model.diffIndexes()\n\n    schema.eachPath((path, schemaType) => {\n      if (!conn.securePathsPerModel[modelName])\n        conn.securePathsPerModel[modelName] = {}\n\n      if (schemaType.options.secure)\n        conn.securePathsPerModel[modelName][path] = true\n    })\n  }\n\n  const diffs = await promiseAll(p).then(\n    fp.pickBy<IndexesDiff>((v, k) => v.toDrop.length || v.toCreate.length)\n  )\n\n  const hasAnyDiff = Object.keys(diffs).length\n\n  if (hasAnyDiff)\n    app.log.info('Result of diffIndexes:', JSON.stringify(diffs, null, 2))\n}\n\nexport async function closeConnections() {\n  const p = []\n\n  for (const uri in pool) p.push(pool[uri].close())\n\n  await Promise.allSettled(p)\n}\n\nexport function model(req: FastifyRequest, modelName: string) {\n  const Model = req.mongoose_conn.models[modelName]\n\n  if (!Model) throw httpErrors.badRequest(SCHEMA_NOT_REGISTERED)\n\n  return Model\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,sBAA2B;AAC3B,sBAA0D;AAC1D,gBAAe;AACf,yBAAuB;AAIvB,IAAM,OAAsC,CAAC;AAE7C,eAAsB,MACpB,KACA,KACA,SACA;AACA,MAAI,OAAmB,KAAK,GAAG;AAE/B,MAAI,CAAC,MAAM;AACT,eAAO,kCAAiB,KAAK,EAAE,WAAW,MAAM,CAAC;AAEjD,UAAM,KAAK,UAAU;AAErB,SAAK,GAAG,IAAI;AAEZ,UAAM,UAAU,KAAK,MAAM,OAAO;AAAA,EACpC;AAEA,SAAO;AACT;AAEA,eAAe,UACb,KACA,MACA,SACA;AACA,QAAM,IAAmD,CAAC;AAE1D,OAAK,sBAAsB,CAAC;AAE5B,aAAW,aAAa,SAAS;AAC/B,UAAM,EAAE,OAAO,IAAI,QAAQ,SAAS;AAEpC,QAAI,aAAa,KAAK,OAAQ;AAE9B,UAAM,QAAQ,KAAK,MAAM,WAAW,MAAM;AAE1C,MAAE,SAAS,IAAI,MAAM,YAAY;AAEjC,WAAO,SAAS,CAAC,MAAM,eAAe;AACpC,UAAI,CAAC,KAAK,oBAAoB,SAAS;AACrC,aAAK,oBAAoB,SAAS,IAAI,CAAC;AAEzC,UAAI,WAAW,QAAQ;AACrB,aAAK,oBAAoB,SAAS,EAAE,IAAI,IAAI;AAAA,IAChD,CAAC;AAAA,EACH;AAEA,QAAM,QAAQ,UAAM,mBAAAA,SAAW,CAAC,EAAE;AAAA,IAChC,UAAAC,QAAG,OAAoB,CAAC,GAAG,MAAM,EAAE,OAAO,UAAU,EAAE,SAAS,MAAM;AAAA,EACvE;AAEA,QAAM,aAAa,OAAO,KAAK,KAAK,EAAE;AAEtC,MAAI;AACF,QAAI,IAAI,KAAK,0BAA0B,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AACzE;;;AD7DO,IAAM,mBAGoB,CAAC,KAAK,SAAS;AAC9C,MAAI,CAAC,IAAI,oBAAoB,QAAQ,GAAG;AACtC,QAAI,gBAAgB,UAAU,IAAI;AAAA,EACpC;AAEA,MAAI,CAAC,IAAI,oBAAoB,uBAAuB,GAAG;AACrD,QAAI,gBAAgB,yBAAyB,EAAE;AAAA,EACjD;AAEA,SAAO,OAAO,KAAK,QAAQ;AACzB,QAAI,gBAAgB,MAAM;AAAA,MACxB;AAAA,MACA,IAAI,uBAAuB;AAAA,MAC3B,KAAK;AAAA,IACP;AAAA,EACF;AACF;",
  "names": ["promiseAll", "fp"]
}
